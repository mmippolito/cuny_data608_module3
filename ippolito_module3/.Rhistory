theme(legend.position='right') +
geom_point(aes(shape='mean'), alpha=0) +
guides(shape=guide_legend(title=NULL, override.aes=list(alpha=1, color='grey', size=5, shape=20))) +
coord_flip()
# Violin plot
inc_ny %>%
ggplot(aes(x='', y=Employees)) +
geom_violin(color='black', fill='magenta4', draw_quantiles=c(0.25, 0.5, 0.75)) +
geom_point(data=inc_ny[inc_ny$Employees > out_hi | inc_ny$Employees < out_lo,]) +
stat_summary(fun='mean', geom='point', shape=20, size=5, color='grey', fill='grey') +
scale_y_continuous(trans='log', breaks=c(10, 100, 1000, 10000)) +
theme_minimal() +
ggtitle('New York Company Employee Counts') +
ylab('Employees (log scale)') + xlab('') +
theme(legend.position='right') +
geom_point(aes(shape='mean'), alpha=0) +
guides(shape=guide_legend(title=NULL, override.aes=list(alpha=1, color='grey', size=5, shape=20)))
# Boxplot
inc_ny %>%
ggplot(aes(x='', y=Employees)) +
geom_boxplot(width=0.75, color='black', fill='magenta4') +
stat_summary(fun='mean', geom='point', shape=20, size=5, color='grey', fill='grey') +
scale_y_continuous(trans='log', breaks=c(10, 100, 1000, 10000)) +
theme_minimal() +
ggtitle('New York Company Employee Counts') +
ylab('Employees (log scale)') + xlab('') +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
theme(legend.position='right') +
geom_point(aes(shape='mean'), alpha=0) +
guides(shape=guide_legend(title=NULL, override.aes=list(alpha=1, color='grey', size=5, shape=20)))
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
library(htmltools)
library(shiny)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
library(htmltools)
library(shiny)
runExample("01_hello")
runExample("01_hello")
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
#shinyApp(ui = ui, server = server)
fluidPage?
?fluidPage
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
runApp('testapp')
runApp('testapp')
runApp('testapp')
runApp('testapp')
runApp('testapp', display.mode='showcase')
?runApp
runApp('testapp', display.mode='showcase', launch.browser=T)
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
runApp('testapp2', display.mode='showcase', launch.browser=T)
runApp('testapp2', display.mode='normal', launch.browser=F)
runApp('testapp2', display.mode='default', launch.browser=F)
runApp('testapp2', display.mode='auto', launch.browser=F)
runApp('testapp2', display.mode='auto', launch.browser=T)
runApp('testapp2', display.mode='d', launch.browser=T)
runApp('testapp2', display.mode='normal')
runApp('testapp2', display.mode='normal', launch.browser=F)
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
knitr::opts_chunk$set(echo = TRUE)
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='normal')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/testapp2')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
#runApp('testapp1', display.mode='normal', launch.browser=T)
runApp('testapp2', display.mode='showcase')
counties <- readRDS("census-app/data/counties.rds")
counties <- readRDS("census-app/data/counties.rds")
counties <- readRDS("data/counties.rds")
head(counties)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='michaelippolito',
token='7487A663DE42F327811538AAFC228D06',
secret='lormrc8FOSr6Wi0aGFcghoPwhxFARmJ6UZJNHmsP')
library(rsconnect)
rsconnect::deployApp('testapp2')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(rsconnect)
df_raw <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
head(df_raw)
describe(df_raw)
library(psych)
describe(df_raw)
summary(df_raw)
# Load data
df_raw <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture3/data/cleaned-cdc-mortality-1999-2010-2.csv")
head(df_raw)
summary(df_raw)
head(df_raw)
summary(df_raw)
head(df_raw)
df <- df_raw
# Factorize
df['State'] <- factor(df['State'])
df <- df_raw
# Factorize
df$State <- factor(df$State)
View(df)
summary(df)
summary(df$State)
head(df_raw)
df$ICD.Chapter <- factor(df$ICD.Chapter)
summary(df)
summary(df$State)
summary(df$ICD.Chapter)
print(length((df$ICD.Chapter)))
print(length(summary(df$ICD.Chapter)))
summary(df$ICD.Chapter)
print(paste0("Number of categories for ICD.Chapter: ", length(summary(df$ICD.Chapter))))
summary(df)
runApp('ippolito_module3', display.mode='normal')
runApp('ippolito_module3', display.mode='normal')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
library(tidyverse)
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
levels(df$ICD.Chapter)
print(paste0("Number of categories for ICD.Chapter: ", length(levels(df$ICD.Chapter))))
# Define UI ----
ui <- fluidPage(
titlePanel("ICD Crude Mortality Rates"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("chkYear", h4("Year"), choices = list("2010" = 1), selected = 1),
selectInput("selChapter", h3("ICD Chapter"), choices = levels(df$ICD.Chapter)selected = 1)
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
# Define UI ----
ui <- fluidPage(
titlePanel("ICD Crude Mortality Rates"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("chkYear", h4("Year"), choices = levels(df$Year), selected = 1),
selectInput("selChapter", h3("ICD Chapter"), choices = levels(df$ICD.Chapter), selected = 1)
),
mainPanel(
plotOutput("plt")
)
)
)
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
match(2010, unique(df$Year)
match(2010, unique(df$Year))
match(2010, unique(df$Year))
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
df %>%
ggplot(aes(x=State, y=Crude.Mortality.Rate)) +
geom_bar()
df %>%
ggplot(aes(x=State, y=Crude.Rate)) +
geom_bar()
# Factorize
df$State <- factor(df$State)
df$ICD.Chapter <- factor(df$ICD.Chapter)
print(paste0("Number of categories for ICD.Chapter: ", length(levels(df$ICD.Chapter))))
summary(df)
df %>%
ggplot(aes(x=State, y=Crude.Rate, stat='identity')) +
geom_bar()
# Factorize
df$State <- factor(df$State)
df$ICD.Chapter <- factor(df$ICD.Chapter)
print(paste0("Number of categories for ICD.Chapter: ", length(levels(df$ICD.Chapter))))
summary(df)
df %>%
ggplot(aes(x=State, y=Crude.Rate), stat='identity') +
geom_bar()
df %>%
ggplot(aes(x=State, y=Crude.Rate), stat='Identity') +
geom_bar()
df %>%
ggplot(aes(x=State, y=Crude.Rate)) +
geom_bar(stat='identity')
df %>%
ggplot(aes(x=State, y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
ggplot(aes(x=reorder(Crude.Rate, State), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
#filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
```{r fig.height=400, fig.width=600}
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
# Factorize
df$State <- factor(df$State)
df$ICD.Chapter <- factor(df$ICD.Chapter)
print(paste0("Number of categories for ICD.Chapter: ", length(levels(df$ICD.Chapter))))
summary(df)
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, df[df$Year==2010]$Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, df[,df$Year==2010]$Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df[df$Year==2010]$Crude.Rate
df[df$Year==2010]$Crude.Rate
df[df$Year==2010,]$Crude.Rate
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, df[df$Year==2010,]$Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, df[df$Year==2010,]$Crude.Rate, sum), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, df[df$Year==2010,]$Crude.Rate, min), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df_tmp <- df %>%
filter(Year==2010)
df %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, df$Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df_tmp %>%
filter(Year==2010) %>%
ggplot(aes(x=reorder(State, df$Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df_tmp %>%
#filter(Year==2010) %>%
ggplot(aes(x=reorder(State, df$Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
View(df_tmp)
df %>%
filter(Year==2010) %>%
filter(ICD.Chapter=='Certain infectious and parasitic diseases') %>%
ggplot(aes(x=reorder(State, df$Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
filter(ICD.Chapter=='Certain infectious and parasitic diseases')
df %>%
filter(Year==2010) %>%
filter(ICD.Chapter=='Certain infectious and parasitic diseases') %>%
ggplot(aes(x=reorder(State, df$Crude.Rate), y=Crude.Rate)) +
geom_bar() + coord_flip()
df %>%
filter(Year==2010) %>%
filter(ICD.Chapter=='Certain infectious and parasitic diseases') %>%
ggplot(aes(x=State, y=Crude.Rate)) +
#ggplot(aes(x=reorder(State, df$Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
filter(ICD.Chapter=='Certain infectious and parasitic diseases') %>%
#ggplot(aes(x=State, y=Crude.Rate)) +
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') + coord_flip()
df %>%
filter(Year==2010) %>%
filter(ICD.Chapter=='Certain infectious and parasitic diseases') %>%
ggplot(aes(x=reorder(State, Crude.Rate), y=Crude.Rate)) +
geom_bar(stat='identity') +
coord_flip() +
theme_minimal() +
xlab("State") +
ylab("Crude Mortality Rate %")
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
df %>%
filter(ICD.Chapter == 'Diseases of the circulatory system')
df %>%
filter(Year==2010) %>%
filter(ICD.Chapter == 'Diseases of the circulatory system')
runApp('ippolito_module3', display.mode='normal')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
shiny::runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
runApp('C:/Users/micha/Box Sync/cuny/608-vis-analytics/module3/ippolito_module3')
